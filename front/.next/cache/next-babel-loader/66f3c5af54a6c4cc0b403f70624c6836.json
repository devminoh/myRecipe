{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/gyeongmin/project/myRecipe/front/components/create/ingredient.tsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from \"react\";\nimport * as style from '../../styles/createStyle';\nimport { theme } from 'antd';\nimport { useFieldArray } from \"react-hook-form\";\nexport function Ingredient(_ref) {\n  _s();\n  var _this = this;\n  var register = _ref.register,\n    name = _ref.name,\n    control = _ref.control;\n  var _useFieldArray = useFieldArray({\n      control: control,\n      name: name\n    }),\n    fields = _useFieldArray.fields,\n    append = _useFieldArray.append,\n    remove = _useFieldArray.remove;\n  var inputRef = useRef(null);\n  var _theme$useToken = theme.useToken(),\n    token = _theme$useToken.token;\n  var _useState = useState(false),\n    inputVisible = _useState[0],\n    setInputVisible = _useState[1];\n\n  // useEffect(() => {\n  //   if (inputVisible) {\n  //     inputRef.current?.focus();\n  //   }\n  // }, [inputVisible]);\n\n  // const handleClose = (removedTag: string) => {\n  //   const newTags = tags.filter((tag:string) => tag !== removedTag);\n  //   console.log(newTags);\n  //   setTags(newTags);\n  // };\n\n  //  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   setInputValue(e.target.value);\n  // };\n\n  // const handleInputConfirm = () => {\n  //   if (inputValue && tags.indexOf(inputValue) === -1) {\n  //     setTags([...tags, inputValue]);\n  //   }\n  //   setInputVisible(false);\n  //   setInputValue('');\n  // };\n\n  // const forMap = (tag: string) => {\n  //   const tagElem = (\n  //     <Tag\n  //       closable\n  //       onClose={(e) => {\n  //         e.preventDefault();\n  //         handleClose(tag);\n  //       }}\n  //     >\n  //       {tag}\n  //     </Tag>\n  //   );\n  //   return (\n  //     <span key={tag} style={{ display: 'inline-block' }}>\n  //       {tagElem}\n  //     </span>\n  //   );\n  // };\n\n  // const tagChild = tags.map(forMap);\n\n  // const tagPlusStyle = {\n  //   background: token.colorBgContainer,\n  //   borderStyle: 'dashed',\n  // };\n\n  // const showInput = () => {\n  //   setInputVisible(true);\n  // };\n\n  return __jsx(style.IngredientWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, fields.map(function (field, idx) {\n    return __jsx(\"div\", {\n      key: field.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, __jsx(\"input\", _extends({}, register(\"\".concat(name, \".\").concat(idx, \".name\")), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    })), __jsx(\"button\", {\n      type: \"button\",\n      onClick: function onClick() {\n        return remove(idx);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \"x\"));\n  }), __jsx(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return append({\n        name: ''\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"\\uD0DC\\uADF8\\uCD94\\uAC00+\"));\n}\n_s(Ingredient, \"9Ik0yC9CY1D9qgpOVL5CdYOsGTI=\", false, function () {\n  return [useFieldArray, theme.useToken];\n});\n_c = Ingredient;\nvar _c;\n$RefreshReg$(_c, \"Ingredient\");","map":{"version":3,"names":["React","useState","useRef","style","theme","useFieldArray","Ingredient","_ref","_s","_this","register","name","control","_useFieldArray","fields","append","remove","inputRef","_theme$useToken","useToken","token","_useState","inputVisible","setInputVisible","__jsx","IngredientWrapper","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","field","idx","key","id","_extends","concat","type","onClick","_c","$RefreshReg$"],"sources":["/Users/gyeongmin/project/myRecipe/front/components/create/ingredient.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport * as style from '../../styles/createStyle';\nimport { Input, Tag, theme } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { TweenOneGroup } from 'rc-tween-one';\nimport type { InputRef } from 'antd';\nimport { useFieldArray } from \"react-hook-form\";\n\nexport interface Prop {\n  register: any;\n  name: string;\n  control: any;\n}\n\n\nexport function Ingredient({ register, name, control }: Prop) {\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: name,\n  });\n  const inputRef = useRef<InputRef>(null);\n  const { token } = theme.useToken();\n  const [inputVisible, setInputVisible] = useState(false);\n  \n  // useEffect(() => {\n  //   if (inputVisible) {\n  //     inputRef.current?.focus();\n  //   }\n  // }, [inputVisible]);\n\n  // const handleClose = (removedTag: string) => {\n  //   const newTags = tags.filter((tag:string) => tag !== removedTag);\n  //   console.log(newTags);\n  //   setTags(newTags);\n  // };\n\n  //  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   setInputValue(e.target.value);\n  // };\n\n  // const handleInputConfirm = () => {\n  //   if (inputValue && tags.indexOf(inputValue) === -1) {\n  //     setTags([...tags, inputValue]);\n  //   }\n  //   setInputVisible(false);\n  //   setInputValue('');\n  // };\n\n  // const forMap = (tag: string) => {\n  //   const tagElem = (\n  //     <Tag\n  //       closable\n  //       onClose={(e) => {\n  //         e.preventDefault();\n  //         handleClose(tag);\n  //       }}\n  //     >\n  //       {tag}\n  //     </Tag>\n  //   );\n  //   return (\n  //     <span key={tag} style={{ display: 'inline-block' }}>\n  //       {tagElem}\n  //     </span>\n  //   );\n  // };\n\n  // const tagChild = tags.map(forMap);\n\n  // const tagPlusStyle = {\n  //   background: token.colorBgContainer,\n  //   borderStyle: 'dashed',\n  // };\n\n  // const showInput = () => {\n  //   setInputVisible(true);\n  // };\n\n  return (\n    <style.IngredientWrapper>\n      {\n        fields.map((field, idx)=>(\n          <div key={field.id}>\n            <input \n            {...register(`${name}.${idx}.name`)}\n            />\n            <button type=\"button\" onClick={()=> remove(idx)}>\n              x\n            </button>\n          </div>\n        ))\n      }\n      <button type=\"button\" onClick={()=>append({name: ''})}>\n        태그추가+\n      </button>\n        {/* <TweenOneGroup\n          enter={{\n            scale: 0.8,\n            opacity: 0,\n            type: 'from',\n            duration: 100,\n          }}\n          onEnd={(e) => {\n            if (e.type === 'appear' || e.type === 'enter') {\n              (e.target as any).style = 'display: inline-block';\n            }\n          }}\n          leave={{ opacity: 0, width: 0, scale: 0, duration: 200 }}\n          appear={false}\n        >\n          {tagChild}\n        </TweenOneGroup>\n        {inputVisible ? (\n          <Input\n            ref={inputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={handleInputChange}\n            onBlur={handleInputConfirm}\n            onPressEnter={handleInputConfirm}\n          />\n        ) : (\n          <Tag onClick={showInput} style={tagPlusStyle}>\n            <PlusOutlined /> 재료 추가\n          </Tag>\n        )} */}\n    </style.IngredientWrapper>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}