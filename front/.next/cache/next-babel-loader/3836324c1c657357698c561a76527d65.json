{"ast":null,"code":"import shortId from 'shortid';\nimport { produce } from 'immer';\nimport { faker } from \"@faker-js/faker\";\nfaker.seed(123);\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: '',\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.internet.userName()\n  },\n  serve: 2,\n  category: '양식',\n  Ingredients: [{\n    name: faker.lorem.paragraph()\n  }, {\n    name: faker.lorem.paragraph()\n  }],\n  image: faker.image.url(),\n  Recipes: [{\n    recipe: faker.lorem.sentence()\n  }, {\n    recipe: faker.lorem.sentence()\n  }, {\n    recipe: faker.lorem.sentence()\n  }],\n  link: faker.lorem.sentence()\n}));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const dummyPost = data => ({\n  id: data.id,\n  User: {\n    id: 1,\n    nickname: 'zerocho'\n  },\n  serve: data.serve,\n  category: data.category,\n  Ingredients: data.ingredients,\n  image: data.image,\n  Recipes: data.recipes,\n  link: 'https://www.10000recipe.com/recipe/6878480'\n});\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      default:\n        return state;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","seed","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","internet","userName","serve","category","Ingredients","name","lorem","paragraph","image","url","Recipes","recipe","sentence","link","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","dummyPost","ingredients","recipes","reducer","state","action","draft","concat","length","error","unshift","filter","v"],"sources":["C:/Users/82109/Desktop/myRecipe/front/reducers/post.tsx"],"sourcesContent":["import shortId from 'shortid';\r\nimport { produce } from 'immer';\r\nimport { faker } from \"@faker-js/faker\";\r\nfaker.seed(123);\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: '',\r\n  hasMorePosts: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n}\r\n\r\nexport const generateDummyPost = (number: number) => Array(number).fill().map(()=> ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.internet.userName(),\r\n  },\r\n  serve: 2,\r\n  category: '양식',\r\n  Ingredients: [{\r\n      name: faker.lorem.paragraph(),\r\n    },{\r\n      name: faker.lorem.paragraph(),\r\n    }],\r\n    image: faker.image.url(),\r\n    Recipes: [{\r\n      recipe: faker.lorem.sentence()\r\n    },{\r\n      recipe: faker.lorem.sentence()\r\n    },{\r\n      recipe: faker.lorem.sentence()\r\n    }],\r\n    link: faker.lorem.sentence()\r\n}));\r\n\r\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const addPost = (data: any)=>({\r\n  type: ADD_POST_REQUEST,\r\n  data\r\n})\r\n\r\nexport const dummyPost = (data:any)=>({\r\n  id: data.id,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'zerocho',\r\n  },\r\n  serve: data.serve,\r\n  category: data.category,\r\n  Ingredients: data.ingredients,\r\n  image: data.image,\r\n  Recipes: data.recipes,\r\n  link: 'https://www.10000recipe.com/recipe/6878480'\r\n});\r\n\r\nconst reducer = (state=initialState, action:any) => {\r\n  return produce(state, (draft:any) => {\r\n    switch(action.type){\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.hasMorePosts = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v:any)=> v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n\r\n};\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}