{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n    getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) //배포용일땐 데브툴즈 사용안함\n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.dispatch({\n    type: \"LOG_IN\"\n  });\n  return store;\n};\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","_ref","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","apply","store","sagaTask","run","type","wrapper","debug"],"sources":["C:/Users/82109/Desktop/myRecipe/front/store/configureStore.tsx"],"sourcesContent":["import { createWrapper } from 'next-redux-wrapper'; \r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\ninterface Proptypes {\r\n  dispatch: any;\r\n  getState: any;\r\n}\r\n\r\nconst loggerMiddleware = ({ dispatch, getState }: Proptypes) => (next: (arg0: any) => any) => (action: any) => {\r\n  console.log(action)\r\n  return next(action);\r\n}\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, loggerMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares)) //배포용일땐 데브툴즈 사용안함\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  store.dispatch({\r\n    type: \"LOG_IN\",\r\n  });\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,WAAW,EAAEC,OAAO,EAAEC,eAAe,QAAQ,OAAO;AAC7D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,OAAOC,OAAO,MAAM,aAAa;AACjC,OAAOC,QAAQ,MAAM,UAAU;AAO/B,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAAC,IAAA;EAAA,IAAMC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;EAAA,OAAkB,UAACC,IAAwB;IAAA,OAAK,UAACC,MAAW,EAAK;MAC7GC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB,OAAOD,IAAI,CAACC,MAAM,CAAC;IACrB,CAAC;EAAA;AAAA;AAED,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;EAC3B,IAAMC,cAAc,GAAGZ,oBAAoB,CAAC,CAAC;EAC7C,IAAMa,WAAW,GAAG,CAACD,cAAc,EAAET,gBAAgB,CAAC;EACtD,IAAMW,QAAQ,GACZ,QACIjB,OAAO,CAACC,eAAe,CAAAiB,KAAA,SAAIF,WAAW,CAAC,CAAC,CAAC;EAAA,EACzCd,mBAAmB,CAACD,eAAe,CAAAiB,KAAA,SAAIF,WAAW,CAAC,CAAC;EAC1D,IAAMG,KAAK,GAAGpB,WAAW,CAACK,OAAO,EAAEa,QAAQ,CAAC;EAC5CE,KAAK,CAACC,QAAQ,GAAGL,cAAc,CAACM,GAAG,CAAChB,QAAQ,CAAC;EAC7Cc,KAAK,CAACX,QAAQ,CAAC;IACbc,IAAI,EAAE;EACR,CAAC,CAAC;EACF,OAAOH,KAAK;AACd,CAAC;AAED,IAAMI,OAAO,GAAGzB,aAAa,CAACgB,cAAc,EAAE;EAC5CU,KAAK;AACP,CAAC,CAAC;AAEF,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}