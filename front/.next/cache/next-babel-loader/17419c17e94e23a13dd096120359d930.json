{"ast":null,"code":"var _jsxFileName = \"/Users/gyeongmin/project/myRecipe/front/components/create/ingredient.tsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useState, useRef } from \"react\";\nimport * as style from '../../styles/createStyle';\nimport { theme } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useFieldArray } from \"react-hook-form\";\nexport function Ingredient({\n  register,\n  name,\n  control\n}) {\n  const {\n    fields,\n    append,\n    remove\n  } = useFieldArray({\n    control,\n    name: name\n  });\n  const inputRef = useRef(null);\n  const {\n    token\n  } = theme.useToken();\n  const {\n    0: inputVisible,\n    1: setInputVisible\n  } = useState(false);\n\n  // useEffect(() => {\n  //   if (inputVisible) {\n  //     inputRef.current?.focus();\n  //   }\n  // }, [inputVisible]);\n\n  // const handleClose = (removedTag: string) => {\n  //   const newTags = tags.filter((tag:string) => tag !== removedTag);\n  //   console.log(newTags);\n  //   setTags(newTags);\n  // };\n\n  //  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   setInputValue(e.target.value);\n  // };\n\n  // const handleInputConfirm = () => {\n  //   if (inputValue && tags.indexOf(inputValue) === -1) {\n  //     setTags([...tags, inputValue]);\n  //   }\n  //   setInputVisible(false);\n  //   setInputValue('');\n  // };\n\n  // const forMap = (tag: string) => {\n  //   const tagElem = (\n  //     <Tag\n  //       closable\n  //       onClose={(e) => {\n  //         e.preventDefault();\n  //         handleClose(tag);\n  //       }}\n  //     >\n  //       {tag}\n  //     </Tag>\n  //   );\n  //   return (\n  //     <span key={tag} style={{ display: 'inline-block' }}>\n  //       {tagElem}\n  //     </span>\n  //   );\n  // };\n\n  // const tagChild = tags.map(forMap);\n\n  // const tagPlusStyle = {\n  //   background: token.colorBgContainer,\n  //   borderStyle: 'dashed',\n  // };\n\n  // const showInput = () => {\n  //   setInputVisible(true);\n  // };\n\n  return __jsx(style.IngredientWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, fields.map((field, idx) => __jsx(\"div\", {\n    key: field.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", _extends({}, register(`${name}.${idx}.name`), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })), __jsx(\"button\", {\n    type: \"button\",\n    onClick: () => remove(idx),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"x\"))), __jsx(\"button\", {\n    type: \"button\",\n    onClick: () => append({\n      name: ''\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, __jsx(PlusOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), \"\\uC7AC\\uB8CC\\uCD94\\uAC00\"));\n}","map":{"version":3,"names":["React","useState","useRef","style","theme","PlusOutlined","useFieldArray","Ingredient","register","name","control","fields","append","remove","inputRef","token","useToken","inputVisible","setInputVisible","__jsx","IngredientWrapper","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","field","idx","key","id","_extends","type","onClick"],"sources":["/Users/gyeongmin/project/myRecipe/front/components/create/ingredient.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport * as style from '../../styles/createStyle';\nimport { Input, Tag, theme } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { TweenOneGroup } from 'rc-tween-one';\nimport type { InputRef } from 'antd';\nimport { useFieldArray } from \"react-hook-form\";\n\nexport interface Prop {\n  register: any;\n  name: string;\n  control: any;\n}\n\n\nexport function Ingredient({ register, name, control }: Prop) {\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: name,\n  });\n  const inputRef = useRef<InputRef>(null);\n  const { token } = theme.useToken();\n  const [inputVisible, setInputVisible] = useState(false);\n  \n  // useEffect(() => {\n  //   if (inputVisible) {\n  //     inputRef.current?.focus();\n  //   }\n  // }, [inputVisible]);\n\n  // const handleClose = (removedTag: string) => {\n  //   const newTags = tags.filter((tag:string) => tag !== removedTag);\n  //   console.log(newTags);\n  //   setTags(newTags);\n  // };\n\n  //  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   setInputValue(e.target.value);\n  // };\n\n  // const handleInputConfirm = () => {\n  //   if (inputValue && tags.indexOf(inputValue) === -1) {\n  //     setTags([...tags, inputValue]);\n  //   }\n  //   setInputVisible(false);\n  //   setInputValue('');\n  // };\n\n  // const forMap = (tag: string) => {\n  //   const tagElem = (\n  //     <Tag\n  //       closable\n  //       onClose={(e) => {\n  //         e.preventDefault();\n  //         handleClose(tag);\n  //       }}\n  //     >\n  //       {tag}\n  //     </Tag>\n  //   );\n  //   return (\n  //     <span key={tag} style={{ display: 'inline-block' }}>\n  //       {tagElem}\n  //     </span>\n  //   );\n  // };\n\n  // const tagChild = tags.map(forMap);\n\n  // const tagPlusStyle = {\n  //   background: token.colorBgContainer,\n  //   borderStyle: 'dashed',\n  // };\n\n  // const showInput = () => {\n  //   setInputVisible(true);\n  // };\n\n  return (\n    <style.IngredientWrapper>\n      {\n        fields.map((field, idx)=>(\n          <div key={field.id}>\n            <input \n            {...register(`${name}.${idx}.name`)}\n            />\n            <button type=\"button\" onClick={()=> remove(idx)}>\n              x\n            </button>\n          </div>\n        ))\n      }\n      <button type=\"button\" onClick={()=>append({name: ''})}>\n        <PlusOutlined />재료추가\n      </button>\n        {/* <TweenOneGroup\n          enter={{\n            scale: 0.8,\n            opacity: 0,\n            type: 'from',\n            duration: 100,\n          }}\n          onEnd={(e) => {\n            if (e.type === 'appear' || e.type === 'enter') {\n              (e.target as any).style = 'display: inline-block';\n            }\n          }}\n          leave={{ opacity: 0, width: 0, scale: 0, duration: 200 }}\n          appear={false}\n        >\n          {tagChild}\n        </TweenOneGroup>\n        {inputVisible ? (\n          <Input\n            ref={inputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={handleInputChange}\n            onBlur={handleInputConfirm}\n            onPressEnter={handleInputConfirm}\n          />\n        ) : (\n          <Tag onClick={showInput} style={tagPlusStyle}>\n            <PlusOutlined /> 재료 추가\n          </Tag>\n        )} */}\n    </style.IngredientWrapper>\n  );\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAaC,MAAM,QAAQ,OAAO;AAC1D,OAAO,KAAKC,KAAK,MAAM,0BAA0B;AACjD,SAAqBC,KAAK,QAAQ,MAAM;AACxC,SAASC,YAAY,QAAQ,mBAAmB;AAGhD,SAASC,aAAa,QAAQ,iBAAiB;AAS/C,OAAO,SAASC,UAAUA,CAAC;EAAEC,QAAQ;EAAEC,IAAI;EAAEC;AAAc,CAAC,EAAE;EAC5D,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAO,CAAC,GAAGP,aAAa,CAAC;IAC/CI,OAAO;IACPD,IAAI,EAAEA;EACR,CAAC,CAAC;EACF,MAAMK,QAAQ,GAAGZ,MAAM,CAAW,IAAI,CAAC;EACvC,MAAM;IAAEa;EAAM,CAAC,GAAGX,KAAK,CAACY,QAAQ,CAAC,CAAC;EAClC,MAAM;IAAA,GAACC,YAAY;IAAA,GAAEC;EAAe,IAAIjB,QAAQ,CAAC,KAAK,CAAC;;EAEvD;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,OACEkB,KAAA,CAAChB,KAAK,CAACiB,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEpBf,MAAM,CAACgB,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,KACpBV,KAAA;IAAKW,GAAG,EAAEF,KAAK,CAACG,EAAG;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACjBP,KAAA,UAAAa,QAAA,KACIxB,QAAQ,CAAE,GAAEC,IAAK,IAAGoB,GAAI,OAAM,CAAC;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAClC,CAAC,EACFP,KAAA;IAAQc,IAAI,EAAC,QAAQ;IAACC,OAAO,EAAEA,CAAA,KAAKrB,MAAM,CAACgB,GAAG,CAAE;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,GAEzC,CACL,CACN,CAAC,EAEJP,KAAA;IAAQc,IAAI,EAAC,QAAQ;IAACC,OAAO,EAAEA,CAAA,KAAItB,MAAM,CAAC;MAACH,IAAI,EAAE;IAAE,CAAC,CAAE;IAAAY,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACpDP,KAAA,CAACd,YAAY;IAAAgB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,4BACV,CAkCe,CAAC;AAE9B"},"metadata":{},"sourceType":"module"}