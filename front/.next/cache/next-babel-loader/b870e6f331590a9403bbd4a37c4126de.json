{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport { shortId } from 'shortid';\n\n// loadPost\n// function loadPostsAPI(data) {\n//   return axios.get(\"/api/posts\", data);\n// }\n\n// function* loadPosts(action) {\n//   console.log(action);\n//   try{\n//     // const result = yield call(loadPostsAPI, action.data)\n//     yield delay(1000);\n//     const id = shortId.generate();\n//     yield put({\n//       type: LOAD_POSTS_SUCCESS,\n//       data: generateDummyPost(10),\n//     });\n//   } catch(err) {\n//     yield put({\n//       type: LOAD_POSTS_FAILURE,\n//       error: err.response.data,\n//     })\n//   }\n// }\n\n// addpost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  console.log(action);\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// removePost\n// function removePostAPI(data) {\n//   return axios.delete(\"/api/post\", data);\n// }\n\n// function* removePost(action) {\n//   try{\n//     // const result = yield call(removePostAPI, action.data)\n//     yield delay(1000);\n//     yield put({\n//       type: REMOVE_POST_SUCCESS,\n//       data: action.data,\n//     });\n//     yield put({\n//       type: REMOVE_POST_OF_ME,\n//       data: action.data,\n//     })\n//   } catch(err) {\n//     // console.error(err)\n//     yield put({\n//       type: REMOVE_POST_FAILURE,\n//       data: err.response.data,\n//     })\n//   }\n// }\n\n//addComment\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n// function* watchLoadPosts() {\n//   yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n// }\n\n// function* watchRemovePost() {\n//   yield takeLatest(REMOVE_POST_REQUEST, removePost);\n// }\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_POST_TO_ME","shortId","addPostAPI","data","post","addPost","action","console","log","id","generate","type","content","err","error","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga","watchLoadPosts","watchRemovePost"],"sources":["/Users/gyeongmin/project/myRecipe/front/sagas/post.tsx"],"sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport {\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  generateDummyPost,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport { shortId } from 'shortid';\n\n// loadPost\n// function loadPostsAPI(data) {\n//   return axios.get(\"/api/posts\", data);\n// }\n\n// function* loadPosts(action) {\n//   console.log(action);\n//   try{\n//     // const result = yield call(loadPostsAPI, action.data)\n//     yield delay(1000);\n//     const id = shortId.generate();\n//     yield put({\n//       type: LOAD_POSTS_SUCCESS,\n//       data: generateDummyPost(10),\n//     });\n//   } catch(err) {\n//     yield put({\n//       type: LOAD_POSTS_FAILURE,\n//       error: err.response.data,\n//     })\n//   }\n// }\n\n// addpost\nfunction addPostAPI(data:any) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action:any) {\n  console.log(action);\n  try{\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    })\n  } catch(err:any) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\n// removePost\n// function removePostAPI(data) {\n//   return axios.delete(\"/api/post\", data);\n// }\n\n// function* removePost(action) {\n//   try{\n//     // const result = yield call(removePostAPI, action.data)\n//     yield delay(1000);\n//     yield put({\n//       type: REMOVE_POST_SUCCESS,\n//       data: action.data,\n//     });\n//     yield put({\n//       type: REMOVE_POST_OF_ME,\n//       data: action.data,\n//     })\n//   } catch(err) {\n//     // console.error(err)\n//     yield put({\n//       type: REMOVE_POST_FAILURE,\n//       data: err.response.data,\n//     })\n//   }\n// }\n\n//addComment\nfunction addCommentAPI(data:any) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action:any) {\n  try{\n    // const result = yield call(addCommentAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch(err:any) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n// function* watchLoadPosts() {\n//   yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n// }\n\n// function* watchRemovePost() {\n//   yield takeLatest(REMOVE_POST_REQUEST, removePost);\n// }\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost), \n    fork(watchLoadPosts), \n    fork(watchRemovePost), \n    fork(watchAddComment)\n  ]);\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,GAAG,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAIEC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAIhBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QAEd,kBAAkB;AACzB,SAASC,cAAc,QAA2B,kBAAkB;AACpE,SAASC,OAAO,QAAQ,SAAS;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASC,UAAUA,CAACC,IAAQ,EAAE;EAC5B,OAAOV,KAAK,CAACW,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,UAAUE,OAAOA,CAACC,MAAU,EAAE;EAC5BC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,IAAG;IACD;IACA,MAAMd,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMiB,EAAE,GAAGR,OAAO,CAACS,QAAQ,CAAC,CAAC;IAC7B,MAAMnB,GAAG,CAAC;MACRoB,IAAI,EAAEjB,gBAAgB;MACtBS,IAAI,EAAE;QACJM,EAAE;QACFG,OAAO,EAAEN,MAAM,CAACH;MAClB;IACF,CAAC,CAAC;IACF,MAAMZ,GAAG,CAAC;MACRoB,IAAI,EAAEX,cAAc;MACpBG,IAAI,EAAEM;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAMI,GAAO,EAAE;IACf,MAAMtB,GAAG,CAAC;MACRoB,IAAI,EAAEhB,gBAAgB;MACtBmB,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACZ;IACtB,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASa,aAAaA,CAACb,IAAQ,EAAE;EAC/B,OAAOV,KAAK,CAACW,IAAI,CAAE,aAAYD,IAAI,CAACc,MAAO,UAAS,EAAEd,IAAI,CAAC;AAC7D;AAEA,UAAUe,UAAUA,CAACZ,MAAU,EAAE;EAC/B,IAAG;IACD;IACA,MAAMd,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACRoB,IAAI,EAAEd,mBAAmB;MACzBM,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAMU,GAAO,EAAE;IACf,MAAMtB,GAAG,CAAC;MACRoB,IAAI,EAAEb,mBAAmB;MACzBgB,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACZ;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUgB,YAAYA,CAAA,EAAG;EACvB,MAAM7B,UAAU,CAACM,gBAAgB,EAAES,OAAO,CAAC;AAC7C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAUe,eAAeA,CAAA,EAAG;EAC1B,MAAM9B,UAAU,CAACS,mBAAmB,EAAEmB,UAAU,CAAC;AACnD;AAEA,eAAe,UAAUG,QAAQA,CAAA,EAAG;EAClC,MAAMjC,GAAG,CAAC,CACRC,IAAI,CAAC8B,YAAY,CAAC,EAClB9B,IAAI,CAACiC,cAAc,CAAC,EACpBjC,IAAI,CAACkC,eAAe,CAAC,EACrBlC,IAAI,CAAC+B,eAAe,CAAC,CACtB,CAAC;AACJ"},"metadata":{},"sourceType":"module"}