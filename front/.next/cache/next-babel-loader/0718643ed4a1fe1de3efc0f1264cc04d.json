{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.dispatch({\n    type: \"LOG_IN\"\n  });\n  return store;\n};\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","type","wrapper","debug"],"sources":["/Users/gyeongmin/project/myRecipe/front/store/configureStore.tsx"],"sourcesContent":["import { createWrapper } from 'next-redux-wrapper'; \nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\ninterface Proptypes {\n  dispatch: any;\n  getState: any;\n}\n\nconst loggerMiddleware = ({ dispatch, getState }: Proptypes) => (next: (arg0: any) => any) => (action: any) => {\n  console.log(action)\n  return next(action);\n}\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer =\n    process.env.NODE_ENV === \"production\"\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.dispatch({\n    type: \"LOG_IN\",\n  });\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,WAAW,EAAEC,OAAO,EAAEC,eAAe,QAAQ,OAAO;AAC7D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,OAAOC,OAAO,MAAM,aAAa;AACjC,OAAOC,QAAQ,MAAM,UAAU;AAO/B,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAoB,CAAC,KAAMC,IAAwB,IAAMC,MAAW,IAAK;EAC7GC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,OAAOD,IAAI,CAACC,MAAM,CAAC;AACrB,CAAC;AAED,MAAMG,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,cAAc,GAAGX,oBAAoB,CAAC,CAAC;EAC7C,MAAMY,WAAW,GAAG,CAACD,cAAc,EAAER,gBAAgB,CAAC;EACtD,MAAMU,QAAQ,GACZ,QACIhB,OAAO,CAACC,eAAe,CAAC,GAAGc,WAAW,CAAC,CAAC,GACxCb,mBAAmB,CAACD,eAAe,CAAC,GAAGc,WAAW,CAAC,CAAC;EAC1D,MAAME,KAAK,GAAGlB,WAAW,CAACK,OAAO,EAAEY,QAAQ,CAAC;EAC5CC,KAAK,CAACC,QAAQ,GAAGJ,cAAc,CAACK,GAAG,CAACd,QAAQ,CAAC;EAC7CY,KAAK,CAACV,QAAQ,CAAC;IACba,IAAI,EAAE;EACR,CAAC,CAAC;EACF,OAAOH,KAAK;AACd,CAAC;AAED,MAAMI,OAAO,GAAGvB,aAAa,CAACe,cAAc,EAAE;EAC5CS,KAAK;AACP,CAAC,CAAC;AAEF,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}