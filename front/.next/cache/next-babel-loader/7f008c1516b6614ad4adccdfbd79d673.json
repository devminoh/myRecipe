{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from 'shortid';\n\n// loadPost\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\nfunction* loadPosts(action) {\n  console.log(action);\n  try {\n    // const result = yield call(loadPostsAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// addpost\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// removePost\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    // console.error(err)\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","put","delay","axios","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","loadPostsAPI","data","get","loadPosts","action","console","log","id","generate","type","err","error","response","addPostAPI","post","addPost","content","removePostAPI","delete","removePost","watchAddPost","watchLoadPosts","watchRemovePost","postSaga"],"sources":["/Users/gyeongmin/project/myRecipe/front/sagas/post.tsx"],"sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport axios, { AxiosRequestConfig } from 'axios';\nimport {\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  generateDummyPost,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from 'shortid';\n\n// loadPost\nfunction loadPostsAPI(data: any) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action: any) {\n  console.log(action);\n  try{\n    // const result = yield call(loadPostsAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch(err: any) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\n// addpost\nfunction addPostAPI(data:any) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action:any) {\n  try{\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    })\n  } catch(err:any) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\n// removePost\nfunction removePostAPI(data: AxiosRequestConfig<any> | undefined) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action: any) {\n  try{\n    // const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    })\n  } catch(err:any) {\n    // console.error(err)\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    })\n  }\n}\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost), \n    fork(watchLoadPosts), \n    fork(watchRemovePost),\n  ]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}